IBM i XML Service Toolkit for Node.js

IBM i XML Service Toolkit is a Node.js library for IBM i manipulation.
------------------------------------------------
XML Service Toolkit Interfaces
------------------------------------------------

1.	Global
	1.	xmlToJson
		Description: 
		Convert the output XML document into JSON format.
		Syntax:
		xmlToJson(string xml)
		Parameters xml: 
		The response generated by XML service program. 
		Return Object:
		Returns a JSON object that can be easily used by JavaScript.
	2.	iCmd
		Description: 
		Construct a CL command request string. 
		Syntax:
		iCmd(string cmd[, object options])
		Parameters cmd: 
		The CL command in one line (no LFs). All parameters are assume to be character unless (?N) to explicit cast to numeric. Most RTVxxxx that ask for a CL variable RTNVAR will not require the (?N) cast.
		Parameters options: 
		The optional parameter indicating how to process the command.
		Field	Type	Description
		exec	string	cmd - cmd only return true/false
		system - system utility return CPFxxxx
		rexx - return output parms and CPFxxxx
		error	string	on - script stops, full error report
		off - script continues, job error log (default)
		fast - script continues, brief error log
		hex	string	on - output value is in raw hex format
		off - output value is encoded by CCSID (default)
		before	string	Convert to this CCSID before system call.
		after	string	Convert output of system call to this CCSID.
		Example:
		var xt = require('./itoolkit');
		var conn = new xt.iConn("DB01", "USER", "PASSWORD");
		conn.add(xt.iCmd("RTVJOBA USRLIBL(?) SYSLIBL(?)"));
		function cb(str) {console.log(str);}
		conn.run(cb);
	3.	iSh
		Description: 
		Construct a PASE command request string. 
		Syntax:
		iSh(string cmd[, object options])
		Parameters cmd: 
		The command in PASE shell.
		Parameters options: 
		The optional parameter indicating how to process the command.
		Field	Type	Description
		rows	string	on - split the output row by row
		off - the output is a block of text (default)
		error	string	on - script stops, full error report
		off - script continues, job error log (default)
		fast - script continues, brief error log
		hex	string	on - output value is in raw hex format
		off - output value is encoded by CCSID (default)
		before	string	Convert to this CCSID before system call.
		after	string	Convert output of system call to this CCSID.
		Example:
		var xt = require('./itoolkit');
		var conn = new xt.iConn("DB01", "USER", "PASSWORD");
		conn.add(xt.iSh("system -i wrksyssts"));
		function cb(str) {console.log(str);}
		conn.run(cb);

2.	Class iConn
	4.	iConn
		Description: 
		Returns the connection object representing the target IBM i system.
		Syntax:
		iConn(string dataSource[, string user, string password[,object options]])
		Parameters dataSource: 
		Name or alias name of the database. 
		Parameters user: 
		User profile for IBM i authorization. 
		Parameters password: 
		The password of specified user profile. 
		Parameters options: 
		A JavaScript object representing the connection options.
		Field	Type	Description
		host	string	The IP/host name of remote system. If this field is undefined, toolkit will connect with DB2 stored procedures rather than REST way. If it is set to *LOCAL, toolkit will connect to local host sever.
		port	integer	The listening port of the REST server.
		path	string	The path of the XML service CGI program.
		ctl	string	Control keywords for operator control over XML service jobs. 
		ipc	string	IPC key name/security route to XML service job.
		buf	integer	Size of output xml buffer

		Return Object:
		Returns a connection object that can be used to post XML service requests.
		Example:
		var xt = require('./itoolkit');
		var option = {
			host : "192.168.1.101",
			port : 8080,
			path : "/cgi-bin/xmlcgi.pgm"
		};
		var conn = new xt.iConn("DB01", "USER", "PASSWORD");  // DB2 
		var conn2 = new xt.iConn("DB01", "USER", "PASSWORD", option); // REST
	5.	debug
		Description: 
		Enable or disable the verbose mode for debugging.
		Syntax 1:
		debug()
		Syntax 2:
		debug(Boolean OnOff)
		Parameters OnOff: 
		false(default) -- debugging information will not be printed. 
		true -- debugging information will be printed.
		Return Object:
		For Syntax 1, it returns an Boolean value indicating whether verbose mode is enabled or not.

	6.	add
		Description: 
		Add a IBM i call to the command list.
		Syntax:
		addCall(object call)
		Parameters call: 
		call can be an instance of class iCmd(CL command), iPgm(IBM i program or service program), iSh(QShell command) or iSql(SQL Statement).
		Example:
		var xt = require('./itoolkit');
		var conn = new xt.iConn("DB01", "USER", "PASSWORD");
		conn.add(xt.iCmd("RTVJOBA USRLIBL(?) SYSLIBL(?)"));
		conn.add(xt.iSh("system -i wrksyssts"));
	7.	run
		Description: 
		Run the commands in the command list one by one. 
		Syntax:
		run(function callback(output))
		Parameters callback:
		The specified call back function to handle the execution result. output is the output XML document from XML service program.
		Example:
		var xt = require('./itoolkit');
		var conn = new xt.iConn("DB01", "USER", "PASSWORD");
		conn.add(xt.iSh("system -i wrksyssts"));
		function cb(str) {console.log(str);}
		conn.run(cb);
	8.	getConnection
		Description: 
		Returns current attached connection object.
		Syntax:
		getConnection()
		Return Object:
		It returns a connection object representing current connection.
	
3.	Class iPgm
	9.	iPgm
		Description: 
		Construct a new IBM i program/service program call object. 
		Syntax:
		newPgm(string pgm[, object options])
		Parameters pgm: 
		The target IBM i program / service program.
		Parameters options: 
		The optional parameter indicating how to process the command.
		Field	Type	Description
		lib	string	The library where the program exists.
		error	string	on - script stops, full error report
		off - script continues, job error log (default)
		fast - script continues, brief error log
		func	string	The target function of the service program
		mode	string	opm - uses non-teraspace to build parm lists
		ile - default using teraspace for "mixed" memory
		Example:
		var xt = require('./itoolkit');
		var conn = new xt.iConn("DB01", "USER", "PASSWORD");
		var pgm = new xt.iPgm("ZZCALL", {"lib":"XMLSERVICE"});
		conn.add(pgm.toXML());
		function cb(str) {console.log(str);}
		conn.run(cb);
	10.	addParam
		Description: 
		Add a new parameter element to current iPgm object.
		Syntax 1:
		addParam(string value, string type[, object options])
		Syntax 2:
		addParam(array value, [, object options])
		Parameters value: 
		The parameter element value. If the parameter is a complex structure, then use syntax 2. In syntax 2, each element in array value has its own type.
		Parameters type: 
		The parameter element type.
		Type	Description	Example
		na	character	hello world (32a)
		npn	packed decimal	30.29 (12p2)
		nsn	zoned decimal	30.29 (12s2)
		nin	signed integer	-30 (10i0)
		nun	unsigned integer	30 (10u0)
		nfn	floating point	30.34 (4f2)
		nb	binary HEX char	F0F1F2CDEF (5b)
		Parameters options: 
		Indicates the properties of the parameter.
		Field	Type	Description
		dim	integer	
		varying	string	on -
		off - 
		2 -
		4 -
		enddo	string	
		setlen	string	
		offset	string	
		trim	string	on -
		off -
		hex	string	on - output value is in raw hex format
		off - output value is encoded by CCSID (default)
		before	string	Convert to this CCSID before system call.
		after	string	Convert output to this CCSID.
		Example:
		var xt = require('./itoolkit');
		var conn = new xt.iConn("DB01", "USER", "PASSWORD");
		var pgm = new xt.iPgm("ZZCALL", {"lib":"XMLSERVICE"});
		pgm.addParam("a", "1A");
		pgm.addParam([
		["x","1A"],
		["77777.77", "12p2"]
		]);
		conn.add(pgm.toXML());
		function cb(str) {console.log(str);}
		conn.run(cb);
	11.	addReturn
		Description: 
		Add a new returned element to current iPgm object.
		Syntax:
		addReturn(string value, string type[, object options])
		Example:
		var xt = require('./itoolkit');
		var conn = new xt.iConn("DB01", "USER", "PASSWORD");
		var pgm = new xt.iPgm("ZZCALL", {"lib":"XMLSERVICE"});
		pgm.addParam("a", "1A");
		pgm.addReturn("0", "20A");
		conn.add(pgm.toXML());
		function cb(str) {console.log(str);}
		conn.run(cb);
	12.	toXML
		Description: 
		Convert current iPgm object into XML format which can be added to the command list of iConn object.
		Syntax:
		toXML()
4.	Class iSql

